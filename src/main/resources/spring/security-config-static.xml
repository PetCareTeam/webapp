<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<security:global-method-security
		secured-annotations="enabled" />

	<security:authentication-manager id="authenticationManager">
		<security:authentication-provider>

		 <security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="
         
         SELECT USERNAME, PASSWORD, CASE ENABLED WHEN 1 THEN 'true' ELSE 'false' END 'ENABLED'
         FROM USERS
         WHERE USERNAME=?;"

		authorities-by-username-query="
        SELECT u.USERNAME, r.ROLENAME
        FROM USERS u, USER_ROLE r
        WHERE u.id = r.pet
        AND u.USERNAME=?;" /> 


	
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http realm="Login protection" use-expressions="true"
		auto-config="true" authentication-manager-ref="authenticationManager">
		<security:form-login login-page='/login'
			login-processing-url="/login.do"  default-target-url="/"
			authentication-failure-url="/login?error" 
			username-parameter="username"
			password-parameter="password" />

		<security:logout logout-success-url="/login?logout" />
		
		<security:remember-me/>
		
		<security:session-management>
			<security:concurrency-control
				max-sessions="1" expired-url="/spring_security_login" />
		</security:session-management>
		

		<security:intercept-url pattern="/login*" access="isAnonymous()" />
		
		<security:intercept-url pattern="/register*" access="isAnonymous()" />
		
		<security:intercept-url pattern="/userDetails/{id}"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/post"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/users/get"
			access="hasRole('ROLE_USER')" />
		<security:intercept-url pattern="/users/{id}"
			access="hasRole('ROLE_USER')" />
	</security:http>

	<!-- <security:logout logout-success-url="/login?logout" /> <security:http 
		realm="Login protection" use-expressions="true" auto-config="false" create-session="stateless" 
		entry-point-ref="unauthorizedEntryPoint" authentication-manager-ref="authenticationManager"> 
		<security:custom-filter ref="authTokenFilter" position="FORM_LOGIN_FILTER" 
		/> <security:intercept-url pattern="/data/rest/user/authenticate" access="permitAll" 
		/> <security:intercept-url pattern="/data/rest/users" access="hasRole('ROLE_USERS')" 
		/> <security:intercept-url pattern="/data/rest/userroles" access="hasRole('ROLE_USERS')" 
		/> <security:intercept-url pattern="/data/rest/videos" method="POST" access="hasRole('ROLE_USERS')" 
		/> <security:intercept-url pattern="/data/rest/videocategories" method="POST" 
		access="hasRole('ROLE_USERS')" /> <security:intercept-url pattern="*" access="permitAll" 
		/> </security:http> <bean id="unauthorizedEntryPoint" class="mk.ukim.finki.sih.webtv.web.rest.auth.UnauthorizedEntryPoint" 
		/> <bean id="authTokenFilter" class="mk.ukim.finki.sih.webtv.web.rest.auth.AuthenticationTokenProcessingFilter" 
		/> -->
</beans>